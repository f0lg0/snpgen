{
    "packagejson" : {
        "main": "server.js",
        "scripts": {
            "start": "node server.js",
            "dev": "nodemon server.js"
        },
        "dependencies": {
            "cookie-parser": "^1.4.5",
            "dotenv": "^8.2.0",
            "ejs": "^3.1.3",
            "express": "^4.17.1",
            "helmet": "^3.23.3",
            "jsonwebtoken": "^8.5.1",
            "mongoose": "^5.9.21",
            "morgan": "^1.10.0"
        },
        "devDependencies": {
            "nodemon": "^2.0.4"
        }
    },
    
    "entryPoint" : {
        "server.js" : "const express = require('express'); const app = express(); require('dotenv').config(); const morgan = require('morgan'); const path = require('path'); const helmet = require('helmet'); const mongoose = require('mongoose'); const cookieParser = require('cookie-parser'); app.use(express.static('public')); app.use(express.urlencoded({ extended: false })); app.set('view engine', 'ejs'); app.use(morgan('dev')); app.use(helmet()); app.use(cookieParser()); mongoose.set('useNewUrlParser', true); mongoose.set('useFindAndModify', false); mongoose.set('useCreateIndex', true); const mongoURI = process.env.DB_URI || 'mongodb://localhost/db-name'; mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true }); const db = mongoose.connection; db.on('error', error => console.error(error)); db.once('open', () => console.log(`Connected to database [${mongoURI}]`)); const home = require('./components/index/index.route'); const api = require('./components/api/api.route'); const date = require('./components/date/date.route'); app.use('/', home); app.use('/api', api); app.use('/today', date); app.use((req, res) => { res.status(404); res.sendFile(path.join(__dirname + '/public/components/404/404.html')); }); const host = process.env.HOST || 'localhost'; const port = process.env.PORT || 5000; app.listen(port, host, () => { console.log(`Server running at http://${host}:${port}`); });"
    },

    "folders" : {
        "components" : ["api", "date", "index", "user"], 
        "config" : null,
        "public" : null, 
        "views" : null,
        "public/components" : ["404", "date", "general", "index"],
        "views/components" : ["date"]
    },

    "readmes" : {
        "components" : "this is the core aspect of this template where everything is structured by components. Instead of having the routes, controllers, models folder instead we have everything groubed by components. For example the user folder will contain everyhting related to the user: routes, controllers, models etc. There's the api folder, the index for the homepage, the date and the user. NOTE: the user folder is empty, it's just for making an example",
        "config" : "all configuration files and nothing else",
        "public" : "all the public files and nothing else Same thing here: everything is grouped by components. We have the folder for the 404 error, the folder for the home page etc I wasn't sure about this but I did it anyway. Also, even if it's not recognized as a good practice, I have a folder that is shared between other files. In there there are just styiling stuff and a function that is needed everywhere. I didn't want to make multiple copies of it.",
        "views" : "here we should place all the server side rendered pages and nothing else Same thing here: everything is grouped by components."
    },

    "appFiles" : {
        "components/api" : {
            "api.controller.js" : "const date = new Date(); exports.today = (req, res) => { res.json({ year: date.getUTCFullYear(), month: date.getUTCMonth() + 1, day: date.getUTCDate() }); }",
            "api.route.js" : "const express = require('express'); const router = express.Router(); const date = require('./api.controller'); router.get('/date', date.today); module.exports = router;"
        },
        "components/date" : {
            "date.controller.js" : "exports.renderPage = (req, res) => { res.render('components/date/date', {ip: req.ip}); };",
            "date.route.js" : "const express = require('express'); const router = express.Router(); const date = require('./date.controller'); router.get('/', date.renderPage); module.exports = router;"
        },

        "components/index" : {
            "index.controller.js" : "const path = require('path'); exports.homePage = (req, res) => { res.sendFile(path.join(__dirname + '../../../public/components/index/index.html')); };",
            "index.route.js" : "const express = require('express'); const router = express.Router(); const home = require('./index.controller'); router.get('/', home.homePage); module.exports = router;"
        },

        "components/user" : {
            "user.controller.js" : "// code here",
            "user.route.js" : "// code here",
            "user.model.js" : "// code here"
        },

        "public/components/404" : {
            "404.html" : " <!DOCTYPE html> <html> <head> <title>Not found</title> <link rel='stylesheet' type='text/css' href='/components/general/general.styles.css'> <link href='https://fonts.googleapis.com/css2?family=Ubuntu:wght@300&display=swap' rel='stylesheet'> </head> <body> <script src='/components/general/general.switchTheme.js'></script> <div class='errorBanner'> <h1>Error</h1> <hr class='hr-style-two'> <p>404 Not Found</p> </div> </body> </html>"
        },

        "public/components/date" : {
            "date.fetchDate.js" : "const API_URL = 'http://localhost:5000/api/date'; fetch(API_URL) .then(res => res.json()) .then((result) => { if (result) { document.getElementById('fetched-date').innerHTML = result.year + '/' + result.month + '/' + result.day; } else { document.getElementById('fetched-date').innerHTML = 'Ooops! Error fetching the API'; } });"
        },

        "public/components/general" : {
            "general.styles.css" : ".light-theme { --color-primary: #FFF; --color-secondary: #EAEAEA; --color-tertiary: #666; --color-quaternary: #FAFAFA; --main-font-color: #000; --main-font-color-hr: rgba(0, 0, 0, 0.75); --secondary-font-color-hr: rgba(0, 0, 0, 0); } .dark-theme { --color-primary: #000; --color-secondary: #212121; --color-tertiary: #333; --color-quaternary: #111; --main-font-color: #FAFAFA; --main-font-color-hr: rgba(255, 255, 255, 0.75); --secondary-font-color-hr: rgba(255, 255, 255, 0); } body { font-family: 'Inter', sans-serif; background-color: var(--color-primary); } .logo { text-align: center; font-weight: 500; color: var(--main-font-color); } .errorBanner { position: absolute; width: 300px; height: 200px; z-index: 15; top: 50%; left: 50%; margin: -100px 0 0 -150px; text-align: center; color: var(--main-font-color); } .hr-style-two { margin-top: 20px; border: 0; height: 1px; width: 70%; background-image: linear-gradient(to right, var(--secondary-font-color-hr), var(--main-font-color-hr), var(--secondary-font-color-hr)); } .action{ margin: auto; width: 200px; } input[type=submit] { width: 100%; margin-bottom: 10px; background-color: var(--main-font-color); border: 1px solid var(--main-font-color); color: var(--color-primary); padding: 12px 20px; border-radius: 4px; cursor: pointer; transition: .3s; } input[type=submit]:hover { background-color: var(--color-primary); color: var(--main-font-color); border: 1px solid var(--main-font-color); border-radius: 4px; }",
            "general.switchTheme.js" : "function setTheme(themeName) { localStorage.setItem('theme', themeName); document.documentElement.className = themeName; } function toggleTheme() { if (localStorage.getItem('theme') === 'dark-theme') { setTheme('light-theme'); } else { setTheme('dark-theme'); } } (function() { if (localStorage.getItem('theme') === 'dark-theme') { setTheme('dark-theme'); } else { setTheme('light-theme'); } })();"
        },

        "public/components/index" : {
            "index.html" : "<!DOCTYPE html> <html> <head> <meta charset='utf-8'> <meta name='viewport' content='width=device-width, initial-scale=1' /> <title>Home</title> <link rel='stylesheet' type='text/css' href='/components/general/general.styles.css'> <link href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700;900&display=swap' rel='stylesheet'> </head> <body> <script src='/components/general/general.switchTheme.js'></script> <div class='logo'> <h1>Home</h1> </div> <div class='action'> <form action='/today'> <input type='submit' value='Get Date'> </form> </div> <div class='action'> <input type='submit' value='Switch Theme' onclick='toggleTheme()'> </div> </body>"
        },

        "views/components/date" : {
            "date.ejs" : "<!DOCTYPE html> <html> <head> <title>Today</title> <link rel='stylesheet' type='text/css' href='/components/general/general.styles.css'> <link href='https://fonts.googleapis.com/css2?family=Ubuntu:wght@300&display=swap' rel='stylesheet'> </head> <body> <script src='/components/general/general.switchTheme.js'></script> <% if (ip) { %> <div class='logo'> <p>Request IP: <%= ip %></p> </div> <% } %> <div class='logo'> <h2 id='fetched-date'></h2> </div> <script src='/components/date/date.fetchDate.js'></script> </body> </html>"
        }

    }

}